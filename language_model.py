from ngram import NGramCounts
from probability import RawProbabilityGenerator
from utils import window, START_SYMBOL, END_SYMBOL


class LanguageModel(object):
    def __init__(self):
        raise NotImplementedError

    def evaluate(self):
        raise NotImplementedError

    def unscramble(self, text):
        raise NotImplementedError

    def text_probability(self, text):
        raise NotImplementedError


class NGramLanguageModel(LanguageModel):
    def __init__(self, n=3, probability_generator=RawProbabilityGenerator):
        self.n = n
        self.ngram_counts = NGramCounts(self.n)
        self.probability_generator = probability_generator(self.ngram_counts)

    def evaluate(self):
        pass

    def unscramble(self, text):
        pass

    def text_probability(self, text):
        """
        Returns the probability of the text as generated by:
            Prod( Pr(w_k | w_k - 1, ..., w_k - (n - 1)) )
        """

        text = [START_SYMBOL] + text.split() + [END_SYMBOL]
        running_prob = 1
        for w in window(text, self.n, left_nulls=True):
            # for first N - 1 words, have to use a lower order model
            n = self.n - len([a for a in w if a is None])
            w = [a for a in w if a is not None]

            probability = self.probability_generator.get_probabilities(
                w,
                n=n,
            )['probability'].values[0]
            print(w, n, probability)
            running_prob *= probability
        print(text, running_prob)
        return running_prob


if __name__ == '__main__':
    ng = NGramLanguageModel()
    print(ng.probability_generator.probs.keys())
    ng.text_probability('What you only need to ask')
