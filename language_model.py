from ngram import NGramCounts
from probability import UnsmoothedProbabilityGenerator
from utils import window

class LanguageModel(object):
    def __init__(self):
        raise NotImplementedError
    
    def evaluate(self):
        raise NotImplementedError

    def unscramble(self, text):
        raise NotImplementedError

    def text_probability(self, text):
        raise NotImplementedError

class NGramLanguageModel(LanguageModel):
    def __init__(self,  n=3, probability_generator=None):
        self.n = n
        self.ngram_counts = NGramCounts(self.n)

        if probability_generator is None:
            probability_generator = UnsmoothedProbabilityGenerator
        self.probability_generator = probability_generator(self.ngram_counts)

    def evaluate(self):
        pass

    def unscramble(self, text):
        pass

    def text_probability(self, text):
        """ 
        Returns the probability of the text as generated by:
            Prod( Pr(w_k | w_k - 1, ..., w_k - (n - 1)) )
        """

        text = ['START'] + text.split() + ['END']
        running_prob = 1
        for w in window(text, self.n):
            probability = self.probability_generator.get_probabilities(w)['probability'].values[0]
            print(w, probability)
            running_prob *= probability
        print(text, running_prob)
        return running_prob
